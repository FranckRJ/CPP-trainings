Expliquer les forwarding references (bind sur lvalue ref ou rvalue ref).
	Expliquer le reference collapsing parce que ça va avec.

Expliquer std::forward (move conditionnel).

Expliquer l'extension de vie des prvalues si elles sont assignées à des références.

Expliquer ce qui se passe pour les retours de fonctions:
	Si la variable retournée est une lvalue:
		- C++11 si les deux types sont identiques et que la variable retournée est auto-storage et locale alors c'est considéré comme une rvalue.
		- C++14 si la variable retournée est auto-storage et locale alors c'est considéré comme une rvalue.
		Si l'objet a été considéré comme une rvalue alors il sera copy-elided si possible, sinon moved si possible.
		Si l'overload resolution rate ou que le type du premier paramètre n'est pas une rvalue-ref, alors l'objet est de nouveau considéré comme une lvalue.
		Si un paramètre est retourné il ne peut pas être copy-elided pour des raisons techniques, mais sera quand même transformé en rvalue et moved.
	Si c'est une xvalue:
		Moved si possible.
	Si c'est une prvalue:
		Copy-elided si possible (càd même type que le type de retour de la fonction), ou moved si possible.
	Expliquer les cas plus complexe quand ce n'est pas un id-expression qui est retourné.
	Expliquer un peu les améliorations apportées par c++20.

Parler un peu de comment passer les paramètres de fonctions.